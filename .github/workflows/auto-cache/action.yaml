name: 'automatically cache based on current runner'

inputs:
  path:
    description: 'path to cache'
    required: true
  key:
    description: 'key'
    required: true
  restore-keys:
    description: 'restore-keys'
    required: true
  save:
    description: 'whether to save the cache'
    default: 'false'
    required: false

runs:
  using: "composite"
  steps:
    - name: setup namespace cache
      if: ${{ contains(runner.name, 'nsc') }}
      uses: namespacelabs/nscloud-cache-action@v1
      with:
        path: ${{ inputs.path }}

    - name: Cache var-cache-apt
      uses: actions/cache@v3
      with:
        path: var-cache-apt
        key: var-cache-apt-${{ runner.arch }}-${{ env.CACHE_COMMIT_DATE }}-${{ github.sha }}
    - name: Cache var-lib-apt
      uses: actions/cache@v3
      with:
        path: var-lib-apt
        key: var-lib-apt-${{ runner.arch }}-${{ env.CACHE_COMMIT_DATE }}-${{ github.sha }}
    - name: inject var-cache-apt into docker
      uses: reproducible-containers/buildkit-cache-dance@v2.1.2
      with:
        cache-source: var-cache-apt
        cache-target: /var/cache/apt
    - name: inject var-lib-apt into docker
      uses: reproducible-containers/buildkit-cache-dance@v2.1.2
      with:
        cache-source: var-lib-apt
        cache-target: /var/lib/apt

    # # make the directory manually in case we didn't get a hit, so it doesn't fail on future steps
    # - id: scons-cache-setup
    #   shell: bash
    #   run: |
    #     mkdir -p ${{ inputs.path }}
    #     sudo chmod -R 777 ${{ inputs.path }}
    #     sudo chown -R $USER ${{ inputs.path }}
